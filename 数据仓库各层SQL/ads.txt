--每月日程统计表
drop table if exists ads_mileage_stat_last_month;
create external table ads_mileage_stat_last_month
(
    vin          string comment '汽车唯一ID',
    mon          string comment '统计月份',
    avg_mileage  int comment '日均里程',
    avg_speed    decimal(16, 2) comment '平均时速',
    danger_count decimal(16, 2) comment '平均百公里急加减速次数'
) comment '里程相关统计'
    row format delimited fields terminated by '\t'
    location '/warehouse/car_data/ads/ads_mileage_stat_last_month';


--本月数据导入
insert overwrite table ads_mileage_stat_last_month
select *
from ads_mileage_stat_last_month
union
select
    vin,
    '2023-07',
    cast(avg(total_mileage) as int) avg_mileage,
    cast(sum(total_speed)/sum(running_count) as decimal(16,2)) avg_speed,
    cast(nvl(sum(danger_count) / sum(total_mileage) * 1000 ,0) as decimal(16,2))
from dws_car_mileage_1d
where substr(dt,0,7)='2023-07'
group by vin;

select * from ads_mileage_stat_last_month;



--最近七天里程汇总表
drop table if exists ads_mileage_stat_last_7d;
create external table ads_mileage_stat_last_7d
(
    vin          string comment '汽车唯一ID',
    dt          string comment '统计日期',
    avg_mileage  int comment '日均里程',
    avg_speed    decimal(16, 2) comment '平均时速分子',
    danger_count decimal(16, 2) comment '平均百公里急加减速次数'
) comment '里程相关统计'
    row format delimited fields terminated by '\t'
    location '/warehouse/car_data/ads/ads_mileage_stat_last_7d';

--数据装载
insert overwrite table ads_mileage_stat_last_7d
select *
from  ads_mileage_stat_last_7d
union
select vin,
       '2023-05-07',
        cast(avg(total_mileage) as int) avg_mileage,
    	cast(sum(total_speed)/sum(running_count) as decimal(16,2)) avg_speed,
    	cast(nvl(sum(danger_count) / sum(total_mileage) * 1000 ,0) as decimal(16,2))
from dws_car_mileage_1d
where dt<='2023-07-27' and dt > date_sub('2023-07-27',7)
group by vin;

select * from ads_mileage_stat_last_7d;


--不同类型汽车的每月行程表
drop table if exists ads_car_type_mileage_stat_last_month;
create external table ads_car_type_mileage_stat_last_month
(
    car_type    string comment '车型',
    mon          string comment '统计月份',
    avg_mileage  int comment '日均里程',
    avg_speed    decimal(16, 2) comment '平均时速分子',
    danger_count decimal(16, 2) comment '平均百公里急加减速次数'
) comment '车型里程相关统计'
    row format delimited fields terminated by '\t'
    location '/warehouse/car_data/ads/ads_car_type_mileage_stat_last_month';

--数据加载
insert overwrite table ads_car_type_mileage_stat_last_month
select *
from  ads_car_type_mileage_stat_last_month
union
select
        type car_type,
       '2023-07' mon,
       cast(avg(total_mileage) as int) avg_mileage,
       cast(sum(total_speed)/sum(running_count) as decimal(16,2)) avg_speed,
       cast( sum(danger_count)/sum(total_mileage) * 1000 as decimal(16,2)) danger_count
from dws_car_mileage_1d s
         join (
             select
                id,
                type
             from dim_car_info_full
             where dt='2023-07-27'
        )car_info
        on s.vin=car_info.id
where substr(s.dt, 0, 7) = '2023-07'
group by type;

select * from ads_car_type_mileage_stat_last_month;


--每月预警警告表
drop table if exists ads_alarm_stat_last_month;
create external table ads_alarm_stat_last_month
(
    vin            string comment '汽车唯一ID',
    mon          string comment '统计月份',
    alarm_count    int comment '告警次数',
    l1_alarm_count int comment '一级告警次数',
    l2_alarm_count int comment '二级告警次数',
    l3_alarm_count int comment '三级告警次数'
) comment '告警相关统计'
    row format delimited fields terminated by '\t'
    location '/warehouse/car_data/ads/ads_alarm_stat_last_month';

--加载数据
insert overwrite table ads_alarm_stat_last_month
select *
from ads_alarm_stat_last_month
union
select vin,
       '2023-07',
       sum(alarm_count),
       sum(l1_alarm_count),
       sum(l2_alarm_count),
       sum(l3_alarm_count)
from dws_car_alarm_1d
where substr(dt, 0, 7) = '2023-07'
group by vin;

select * from ads_alarm_stat_last_month;


--温控主题每月汇总
drop table if exists ads_temperature_stat_last_month;
create external table ads_temperature_stat_last_month
(
    vin                                string comment '汽车唯一ID',
    mon          string comment '统计月份',
    max_motor_temperature              int comment '电机最高温度',
    avg_motor_temperature              decimal(16, 2) comment '电机平均温度',
    max_motor_controller_temperature   int comment '电机控制器最高温度',
    avg_motor_controller_temperature   decimal(16, 2) comment '电机控制器平均温度',
    max_battery_temperature            int comment '最高电池温度',
    battery_temperature_abnormal_count int comment '电池温度异常值次数'
) comment '温控相关统计'
    row format delimited fields terminated by '\t'
    location '/warehouse/car_data/ads/ads_temperature_stat_last_month';

--加载数据
insert overwrite table ads_temperature_stat_last_month
select *
from ads_temperature_stat_last_month
union
select
    motor.vin,
    '2023-07' mon,
    max_motor_temperature,
    cast(avg_motor_temperature as decimal(16,2)) avg_motor_temperature,
    max_motor_controller_temperature,
    cast(avg_motor_controller_temperature as decimal(16,2)) avg_motor_controller_temperature,
    max_battery_temperature,
    battery_temperature_abnormal_count
from (
     select
        vin,
        max(max_motor_temperature) max_motor_temperature,
        avg(avg_motor_temperature) avg_motor_temperature,
        max(max_motor_controller_temperature) max_motor_controller_temperature,
        avg(avg_motor_controller_temperature) avg_motor_controller_temperature
    from dws_car_motor_1d
    where substr(dt, 0, 7) = '2023-07'
    group by vin
)motor
join
    (
    select
        vin,
        max(max_battery_temperature) max_battery_temperature,
        sum(battery_temperature_abnormal_count) battery_temperature_abnormal_count
    from dws_car_battery_1d
    where substr(dt, 0, 7) = '2023-07'
    group by vin
)battery
on motor.vin=battery.vin;

select * from ads_temperature_stat_last_month;

--能耗主题表
--每月充电指标表
drop table if exists ads_consume_stat_last_month;
create external table ads_consume_stat_last_month
(
    vin                   string comment '汽车唯一ID',
    mon          string comment '统计月份',
    soc_per_charge        decimal(16, 2) comment '次均充电电量',
    duration_per_charge   decimal(16, 2) comment '次均充电时长',
    charge_count          int comment '充电次数',
    fast_charge_count     int comment '快充次数',
    slow_charge_count     int comment '慢充次数',
    fully_charge_count    int comment '深度充电次数',
    soc_per_100km         decimal(16, 2) comment 'soc百公里平均消耗',
    soc_per_run           decimal(16, 2) comment '每次里程soc平均消耗',
    soc_last_100km        decimal(16, 2) comment '最近百公里soc消耗'
) comment '能耗主题统计'
    row format delimited fields terminated by '\t'
    location '/warehouse/car_data/ads/ads_consume_stat_last_month';



--充电指标的计算
select--根据平均电流得到充电模型，展示完整数据(每行代表每月的数据)
    vin,
    '2023-07' mon,
    avg(soc)  soc_per_charge,    --本月所有充电的 平均充电量
    avg(duration)  duration_per_charge, --平均充电时长
    count(*)   charge_count ,--本月充电次数
    sum(`if`(avg_electric>=180,1,0)) charge_count,  --快充次数
    sum(`if`(avg_electric<180,1,0)) slow_charge_count, --慢充次数
    sum(full_charge) fully_charge_count
from(
select--计算平均电流(每行就代表每次的数据)
    vin,
    '2023-07' mon,
    max(soc)-min(soc)  soc,  --每次充电量
    (max(`timestamp`)-min(`timestamp`))/1000  duration,  --每次充电时长(单位是s)
    mark,   --第n次充电次数
    avg(electric_current) avg_electric, --平均电流，用于判断充电类型'
    `if`(min(soc)<=20 and max(soc)>=80,1,0)  full_charge --判断本次sbs'深度充电'

from (select--由时间戳之差计算第n次充电次数（mark）
            vin,
            soc,                                                  --剩余电量
            electric_current,--电流
            `timestamp`,
            sum(`if`(dif_time > 60000, 1, 0)) over (partition by vin order by `timestamp`) mark --判断上下时间戳相差是否大于60s，是:1，否:0。其中1表示是一次新的充电,利用sum函数可表示第几次充电
      from (--基本数据不变，计算时间戳之差
               select vin,
                      soc,                                                                                       --剩余电量
                      electric_current,--电流
                      `timestamp`,
                      `timestamp` - lag(`timestamp`, 1, 0) over (partition by vin order by `timestamp`) dif_time --时间戳之差
               from dwd_car_parking_charging_inc
               where substr(dt, 0, 7) = '2023-07'
               ) t1
      )t2
group by vin,mark
)t3
group by vin;


--行程指标的计算（即耗能计算）
--在dws层中我们已经实现了电动模式下单次行程汇总表但是遗留了一个问题——跨天问题
with single_trip as (
    select
    vin,
    start_soc, --开始电量
    end_soc,
    start_mileage, --开始时的里程数
    end_mileage,
    start_timestamp, --开始时的时间戳
    end_timestamp,  --结束时的时间戳
    dt
from dws_electricity_single_trip_detail   --存电动模式单次行程汇总表
where substr(dt, 0, 7) = '2023-07'
)
select
    vin,
    avg(start_soc-end_soc)  soc_per_run,  --每次里程的平均消耗
    sum(start_soc-end_soc)/sum(end_mileage-start_mileage) *1000 soc_per_100km --总能量/总里程=每0.1m的平均耗能，x1000就是每100km的平均耗能
from (
        select --合并夜班行程数据，并标识冗余数据
             t1.vin,
             t1.start_soc,                                                                              --开始电量
             nvl(t2.end_soc, t1.end_soc) end_soc,--如果存在t2.end_soc说明是夜车，用t2的剩余电流
             t1.start_mileage,                                                                          --开始时的里程数
             nvl(t2.end_mileage, t1.end_mileage)    end_mileage,
             t1.start_timestamp,                                                                        --开始时的时间戳
             nvl(t2.end_timestamp, t1.end_timestamp)  end_timestamp, --结束时的时间戳
             lag(t2.vin, 1, null) over (partition by t1.vin order by t1.start_timestamp) del_mark--删除标记，删除今天第一次数据（因为已经和昨天的合并了）
        from single_trip t1
        left join single_trip t2 --保留一组数据，只
        on t1.vin = t2.vin and datediff(t2.dt, t1.dt) = 1 and t2.start_timestamp - t1.end_timestamp = 30000
--关联条件：1.是同一辆车 2.两天相差1天  3.今天开始时间戳-昨天结束时间戳小于30s——说明属于同一次行程（也就说只有夜车行程才会被关联）
     )t3
where del_mark is null
group by vin;




--至此大多数属性的值都计算出来了，还差一个最近100km的能耗，需要单独拎出来，因为不好理解（需要用到上表）
with single_trip as (
    select
    vin,
    start_soc, --开始电量
    end_soc,
    start_mileage, --开始时的里程数
    end_mileage,
    start_timestamp, --开始时的时间戳
    end_timestamp,  --结束时的时间戳
    dt
from dws_electricity_single_trip_detail   --存电动模式单次行程汇总表
where substr(dt, 0, 7) = '2023-07'
)
select
    vin,
    avg(start_soc-end_soc)  soc_per_run,  --每次里程的平均消耗
    sum(start_soc-end_soc)/sum(end_mileage-start_mileage) *1000 soc_per_100km， --总能量/总里程=每0.1m的平均耗能，x1000就是每100km的平均耗能
    sum(`if`(dif_of_sum_mileage<1000 and sum_of_mileage>=1000,sum_of_mileage,0))/
    sum(`if`(dif_of_sum_mileage<1000 and sum_of_mileage>=1000,cost_sum_of_soc,0)) *1000  soc_last_100km--最近100km耗能
from (
select
    vin,
    start_mileage,
    end_mileage,
    sum_of_mileage,--总里程(动态)
    cost_sum_of_soc, --总耗电（动态）
    lag(sum_of_mileage,1,0) over (partition by vin order by end_timestamp desc )   dif_of_sum_mileage
from (select vin,
             start_timestamp,
             end_timestamp,
             start_mileage,
             end_mileage,
             sum(end_mileage - start_mileage) over (partition by vin order by end_timestamp desc ) sum_of_mileage,--总里程(动态)
             sum(start_soc - end_soc)
                 over (partition by vin order by end_timestamp desc )                              cost_sum_of_soc --总耗电（动态）
      from (select --合并夜班行程数据，并标识冗余数据
                   t1.vin,
                   t1.start_soc,                                                                              --开始电量
                   nvl(t2.end_soc, t1.end_soc)                                                 end_soc,--如果存在t2.end_soc说明是夜车，用t2的剩余电流
                   t1.start_mileage,                                                                          --开始时的里程数
                   nvl(t2.end_mileage, t1.end_mileage)                                         end_mileage,
                   t1.start_timestamp,                                                                        --开始时的时间戳
                   nvl(t2.end_timestamp, t1.end_timestamp)                                     end_timestamp, --结束时的时间戳
                   lag(t2.vin, 1, null) over (partition by t1.vin order by t1.start_timestamp) del_mark--删除标记，删除今天第一次数据（因为已经和昨天的合并了）
            from single_trip t1
                     left join single_trip t2 --保留一组数据，只
                               on t1.vin = t2.vin and datediff(t2.dt, t1.dt) = 1 and
                                  t2.start_timestamp - t1.end_timestamp = 30000
--关联条件：1.是同一辆车 2.两天相差1天  3.今天开始时间戳-昨天结束时间戳小于30s——说明属于同一次行程（也就说只有夜车行程才会被关联）
           ) t3
      where del_mark is null
)t4
)t5
group by vin;


--充电+耗能
with single_trip as (
    select
    vin,
    start_soc, --开始电量
    end_soc,
    start_mileage, --开始时的里程数
    end_mileage,
    start_timestamp, --开始时的时间戳
    end_timestamp,  --结束时的时间戳
    dt
from dws_electricity_single_trip_detail   --存电动模式单次行程汇总表
where substr(dt, 0, 7) = '2023-07'
) ,a0 as (
    select--根据平均电流得到充电模型，展示完整数据(每行代表每月的数据)
    vin,
    '2023-07' mon,
    avg(soc)  soc_per_charge,    --本月所有充电的 平均充电量
    avg(duration)  duration_per_charge, --平均充电时长
    count(*)   charge_count ,--本月充电次数
    sum(`if`(avg_electric>=180,1,0)) fast_charge_count,  --快充次数
    sum(`if`(avg_electric<180,1,0)) slow_charge_count, --慢充次数
    sum(full_charge) fully_charge_count
from(
select--计算平均电流(每行就代表每次的数据)
    vin,
    '2023-07' mon,
    max(soc)-min(soc)  soc,  --每次充电量
    (max(`timestamp`)-min(`timestamp`))/1000  duration,  --每次充电时长(单位是s)
    mark,   --第n次充电次数
    avg(electric_current) avg_electric, --平均电流，用于判断充电类型'
    `if`(min(soc)<=20 and max(soc)>=80,1,0)  full_charge --判断本次sbs'深度充电'

from (select--由时间戳之差计算第n次充电次数（mark）
            vin,
            soc,                                                  --剩余电量
            electric_current,--电流
            `timestamp`,
            sum(`if`(dif_time > 60000, 1, 0)) over (partition by vin order by `timestamp`) mark --判断上下时间戳相差是否大于60s，是:1，否:0。其中1表示是一次新的充电,利用sum函数可表示第几次充电
      from (--基本数据不变，计算时间戳之差
               select vin,
                      soc,                                                                                       --剩余电量
                      electric_current,--电流
                      `timestamp`,
                      `timestamp` - lag(`timestamp`, 1, 0) over (partition by vin order by `timestamp`) dif_time --时间戳之差
               from dwd_car_parking_charging_inc
               where substr(dt, 0, 7) = '2023-07'
               ) a1
      )a2
group by vin,mark
)a3
group by vin
)
insert overwrite table ads_consume_stat_last_month
select *
from ads_consume_stat_last_month
union
select
    a0.vin,
    '2023-07' mon,
    cast(nvl(soc_per_charge,0) as  decimal(16,2)),              --本月所有充电的 平均充电量
    cast(nvl(duration_per_charge,0)as  decimal(16,2)),                                          --本月平均充电时长
    charge_count,
    fast_charge_count,
    slow_charge_count,
    fully_charge_count,
    cast(nvl(soc_per_100km,0)as  decimal(16,2)),
    cast(nvl(soc_per_run,0)as  decimal(16,2)),
    cast(nvl(soc_last_100km,0)as  decimal(16,2))
from (select vin,
             avg(start_soc - end_soc)                                           soc_per_run, --每次里程的平均消耗
             sum(start_soc - end_soc) / sum(end_mileage - start_mileage) * 1000 soc_per_100km, --总能量/总里程=每0.1m的平均耗能，x1000就是每100km的平均耗能
    sum(`if`(dif_of_sum_mileage<1000 and sum_of_mileage>=1000,sum_of_mileage,0))/
    sum(`if`(dif_of_sum_mileage<1000 and sum_of_mileage>=1000,cost_sum_of_soc,0)) *1000  soc_last_100km--最近100km耗能
      from (select vin,
                   start_soc,
                   end_soc,
                   start_mileage,
                   end_mileage,
                   sum_of_mileage,--总里程(动态)
                   cost_sum_of_soc, --总耗电（动态）
                   lag(sum_of_mileage, 1, 0) over (partition by vin order by end_timestamp desc ) dif_of_sum_mileage
            from (select vin,
                         start_soc,
                         end_soc,
                         start_timestamp,
                         end_timestamp,
                         start_mileage,
                         end_mileage,
                         sum(end_mileage - start_mileage)
                             over (partition by vin order by end_timestamp desc ) sum_of_mileage,--总里程(动态)
                         sum(start_soc - end_soc)
                             over (partition by vin order by end_timestamp desc ) cost_sum_of_soc --总耗电（动态）
                  from (select --合并夜班行程数据，并标识冗余数据
                               t1.vin,
                               t1.start_soc    start_soc,                                                                              --开始电量
                               nvl(t2.end_soc, t1.end_soc)                                                 end_soc,--如果存在t2.end_soc说明是夜车，用t2的剩余电流
                               t1.start_mileage,                                                                          --开始时的里程数
                               nvl(t2.end_mileage, t1.end_mileage)                                         end_mileage,
                               t1.start_timestamp,                                                                        --开始时的时间戳
                               nvl(t2.end_timestamp, t1.end_timestamp)                                     end_timestamp, --结束时的时间戳
                               lag(t2.vin, 1, null) over (partition by t1.vin order by t1.start_timestamp) del_mark--删除标记，删除今天第一次数据（因为已经和昨天的合并了）
                        from single_trip t1
                                 left join single_trip t2 --保留一组数据，只
                                           on t1.vin = t2.vin and datediff(t2.dt, t1.dt) = 1 and
                                              t2.start_timestamp - t1.end_timestamp = 30000
--关联条件：1.是同一辆车 2.两天相差1天  3.今天开始时间戳-昨天结束时间戳小于30s——说明属于同一次行程（也就说只有夜车行程才会被关联）
                       ) t3
                  where del_mark is null) t4) t5
      group by vin
)t6 join a0
on t6.vin=a0.vin;


 



--车型能耗表
drop table if exists ads_car_type_consume_stat_last_month;
create external table ads_car_type_consume_stat_last_month
(
    car_type             string comment '车型',
    mon          string comment '统计月份',
    avg_soc_per_charge        decimal(16, 2) comment '平均每次充电电量',
    avg_duration_per_charge   decimal(16, 2) comment '平均每次充电时长',
    avg_charge_count          int comment '平均充电次数',
    avg_fast_charge_count     int comment '平均快充次数',
    avg_slow_charge_count     int comment '平均慢充次数',
    avg_fully_charge_count    int comment '平均深度充电次数',
    soc_per_100km         decimal(16, 2) comment 'soc百公里平均消耗',
    soc_per_run           decimal(16, 2) comment '每次里程soc平均消耗',
    soc_last_100km        decimal(16, 2) comment '最近百公里soc平均消耗'
) comment '车型能耗主题统计'
    row format delimited fields terminated by '\t'
    location '/warehouse/car_data/ads/ads_car_type_consume_stat_last_month';


--数据加载
insert overwrite table ads_car_type_consume_stat_last_month
select *
from ads_car_type_consume_stat_last_month
union
select
    type,
    '2023-07' mon,
    cast(avg(soc_per_charge) as decimal(16,2)) avg_soc_per_charge,
    cast(avg(duration_per_charge) as decimal(16,2)) avg_duration_per_charge,
    cast(avg(charge_count) as int) avg_charge_count,
    cast(avg(fast_charge_count) as int) avg_fast_charge_count,
    cast(avg(slow_charge_count) as int ) avg_slow_charge_count,
    cast( avg(fully_charge_count) as int ) avg_fully_charge_count,
    cast(avg(soc_per_100km) as decimal(16,2)) soc_per_100km,
    cast(avg(soc_per_run) as decimal(16,2)) soc_per_run,
    cast(avg(soc_last_100km) as decimal(16,2))soc_last_100km
from (
     select
        vin,
        mon,
        soc_per_charge,
        duration_per_charge,
        charge_count,
        fast_charge_count,
        slow_charge_count,
        fully_charge_count,
        soc_per_100km,
        soc_per_run,
        soc_last_100km
    from ads_consume_stat_last_month
    where mon='2023-07'
)consume
join (
    select
        id,
        type
    from dim_car_info_full
    where dt='2023-07-27'
)car_info
on vin=id
group by type;

select * from ads_car_type_consume_stat_last_month;
